# This workflow is modified from Reth:
# https://github.com/paradigmxyz/reth/blob/main/.github/workflows/release.yml

name: release

on:
  workflow_dispatch:
  push:
    tags:
      - v*

env:
  REPO_NAME: ${{ github.repository_owner }}/world-chain
  IMAGE_NAME: ${{ github.repository }}
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  extract-version:
    name: extract version
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
        id: extract_version
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}

  build:
    name: build release
    runs-on: ${{ matrix.configs.os }}
    needs: extract-version
    strategy:
      matrix:
        configs:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            profile: maxperf
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            profile: maxperf
          - target: aarch64-apple-darwin
            os: macos-14
            profile: maxperf
          - target: x86_64-pc-windows-gnu
            os: ubuntu-20.04
            profile: maxperf
        build:
          - command: build-node
            binary: world-chain-builder
            features: jemalloc
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.configs.target }}
      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@cross
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Apple M1 setup
        if: matrix.configs.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Build World Chain
        run: just ${{ matrix.build.command }} --bin ${{matrix.build.binary}} --profile ${{matrix.configs.profile}} --target ${{ matrix.configs.target }} --features ${{ matrix.build.features}}
      - name: Move binary
        run: |
          mkdir artifacts
          [[ "${{ matrix.configs.target }}" == *windows* ]] && ext=".exe"
          mv "${{matrix.build.binary}}/target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/${{ matrix.build.binary }}${ext}" ./artifacts

      - name: Configure GPG and create artifacts
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --batch --import
          cd artifacts
          tar -czf ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz ${{ matrix.build.binary }}*
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          mv *tar.gz* ..
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          path: ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz

      - name: Upload signature
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc
          path: ${{ matrix.build.binary }}-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: world-chain-builder
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
